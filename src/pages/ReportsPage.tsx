import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import { getUserGifts } from '../firebase/gift-service';
import { getUserEvents } from '../firebase/event-service';
import { getGuests } from '../firebase/guest-service';
import {
  exportGiftSummary,
  exportThankYouList,
  exportEventSummary,
  exportGuestList,
  createShareableLink,
  emailReport
} from '../services/report-service';
import { ReportType, ExportFormat, ReportOptions } from '../types/report-types';

const ReportsPage: React.FC = () => {
  const navigate = useNavigate();
  const { user, isAuthenticated } = useAuth();
  
  const [gifts, setGifts] = useState<any[]>([]);
  const [events, setEvents] = useState<any[]>([]);
  const [guests, setGuests] = useState<any[]>([]);
  
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  
  // Report configuration state
  const [reportType, setReportType] = useState<ReportType>('gift-summary');
  const [exportFormat, setExportFormat] = useState<ExportFormat>('pdf');
  const [selectedEvent, setSelectedEvent] = useState('');
  const [includeNotes, setIncludeNotes] = useState(false);
  const [includePrice, setIncludePrice] = useState(true);
  const [dateRange, setDateRange] = useState({ start: '', end: '' });
  const [sortBy, setSortBy] = useState('date');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('desc');
  
  // Sharing state
  const [sharingEmail, setSharingEmail] = useState('');
  const [isSharing, setIsSharing] = useState(false);
  const [shareableLink, setShareableLink] = useState('');
  
  // Check authentication and redirect if not logged in
  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
    }
  }, [isAuthenticated, navigate]);
  
  // Load user data when component mounts
  useEffect(() => {
    const loadData = async () => {
      if (!user) return;
      
      setLoading(true);
      setError(null);
      
      try {
        // Load gifts, events, and guests in parallel
        const [userGifts, userEvents, userGuests] = await Promise.all([
          getUserGifts(user.id),
          getUserEvents(user.id),
          getGuests(user.id)
        ]);
        
        setGifts(userGifts);
        setEvents(userEvents);
        setGuests(userGuests);
        
        // Set default date range (last 12 months)
        const today = new Date();
        const oneYearAgo = new Date(today);
        oneYearAgo.setFullYear(today.getFullYear() - 1);
        
        setDateRange({
          start: oneYearAgo.toISOString().split('T')[0],
          end: today.toISOString().split('T')[0]
        });
      } catch (err) {
        console.error('Error loading data for reports:', err);
        setError('Failed to load data. Please try again.');
      } finally {
        setLoading(false);
      }
    };
    
    loadData();
  }, [user]);
  
  // Reset success and error messages when report type changes
  useEffect(() => {
    setError(null);
    setSuccessMessage(null);
    setShareableLink('');
    setIsSharing(false);
  }, [reportType]);
  
  // Get report options based on current state
  const getReportOptions = (): ReportOptions => {
    return {
      title: getReportTitle(),
      includeNotes,
      includePrice,
      filterByEvent: selectedEvent || undefined,
      filterByDate: dateRange.start && dateRange.end ? dateRange : undefined,
      sortBy,
      sortDirection,
      footerText: `Generated by Gift Tracker - ${new Date().toLocaleDateString()}`
    };
  };
  
  // Get the title based on report type
  const getReportTitle = (): string => {
    switch (reportType) {
      case 'gift-summary':
        return 'Gift Summary Report';
      case 'thank-you-list':
        return 'Thank You Notes To Send';
      case 'event-summary':
        return `Event Summary${selectedEvent ? `: ${selectedEvent}` : ''}`;
      case 'guest-list':
        return 'Guest List';
      default:
        return 'Gift Tracker Report';
    }
  };
  
  // Handle generate report button click
  const handleGenerateReport = () => {
    setError(null);
    setSuccessMessage(null);
    setShareableLink('');
    
    try {
      const options = getReportOptions();
      
      switch (reportType) {
        case 'gift-summary':
          exportGiftSummary(gifts, exportFormat, options);
          break;
        
        case 'thank-you-list':
          exportThankYouList(gifts, exportFormat, options);
          break;
        
        case 'event-summary':
          if (!selectedEvent) {
            setError('Please select an event to generate an event summary.');
            return;
          }
          
          const event = events.find(e => e.id === selectedEvent);
          if (!event) {
            setError('Selected event not found.');
            return;
          }
          
          exportEventSummary(event, gifts, guests, exportFormat, options);
          break;
        
        case 'guest-list':
          exportGuestList(guests, exportFormat, options);
          break;
      }
      
      setSuccessMessage(`${getReportTitle()} ${exportFormat.toUpperCase()} generated successfully!`);
    } catch (err) {
      console.error('Error generating report:', err);
      setError('Failed to generate report. Please try again.');
    }
  };
  
  // Handle share report button click
  const handleShareReport = async () => {
    setIsSharing(true);
    setError(null);
    setSuccessMessage(null);
    
    try {
      const options = getReportOptions();
      let data;
      
      switch (reportType) {
        case 'gift-summary':
          data = { gifts };
          break;
        
        case 'thank-you-list':
          data = { gifts: gifts.filter(g => !g.thankYouSent) };
          break;
        
        case 'event-summary':
          if (!selectedEvent) {
            setError('Please select an event to share an event summary.');
            setIsSharing(false);
            return;
          }
          
          const event = events.find(e => e.id === selectedEvent);
          if (!event) {
            setError('Selected event not found.');
            setIsSharing(false);
            return;
          }
          
          data = {
            event,
            gifts: gifts.filter(g => g.occasion === event.name),
            guests: guests.filter(g => g.eventId === event.id)
          };
          break;
        
        case 'guest-list':
          data = { guests };
          break;
      }
      
      // Generate shareable link
      const link = await createShareableLink(reportType, data, options);
      setShareableLink(link);
      
      // If email is provided, send email
      if (sharingEmail) {
        await emailReport(reportType, data, [sharingEmail], options);
        setSuccessMessage(`Report shared successfully with ${sharingEmail}!`);
        setSharingEmail('');
      } else {
        setSuccessMessage('Shareable link generated successfully!');
      }
    } catch (err) {
      console.error('Error sharing report:', err);
      setError('Failed to share report. Please try again.');
    } finally {
      setIsSharing(false);
    }
  };
  
  // Copy link to clipboard
  const handleCopyLink = () => {
    navigator.clipboard.writeText(shareableLink)
      .then(() => setSuccessMessage('Link copied to clipboard!'))
      .catch(() => setError('Failed to copy link. Please try again.'));
  };
  
  if (loading) {
    return (
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-2xl font-bold mb-6">Reports & Exports</h1>
        <div className="flex justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-500"></div>
        </div>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold mb-6">Reports & Exports</h1>
      
      {/* Error and Success Messages */}
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
          <button
            className="float-right font-bold"
            onClick={() => setError(null)}
          >
            &times;
          </button>
        </div>
      )}
      
      {successMessage && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
          {successMessage}
          <button
            className="float-right font-bold"
            onClick={() => setSuccessMessage(null)}
          >
            &times;
          </button>
        </div>
      )}
      
      <div className="bg-white shadow-md rounded-lg p-6">
        <div className="mb-6">
          <h2 className="text-xl font-semibold mb-4">Generate Report</h2>
          
          {/* Report Type Selection */}
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="reportType">
              Report Type
            </label>
            <select
              id="reportType"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={reportType}
              onChange={(e) => setReportType(e.target.value as ReportType)}
            >
              <option value="gift-summary">Gift Summary</option>
              <option value="thank-you-list">Thank You List</option>
              <option value="event-summary">Event Summary</option>
              <option value="guest-list">Guest List</option>
            </select>
          </div>
          
          {/* Export Format Selection */}
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              Export Format
            </label>
            <div className="flex items-center space-x-4">
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="form-radio"
                  value="pdf"
                  checked={exportFormat === 'pdf'}
                  onChange={() => setExportFormat('pdf')}
                />
                <span className="ml-2">PDF</span>
              </label>
              <label className="inline-flex items-center">
                <input
                  type="radio"
                  className="form-radio"
                  value="csv"
                  checked={exportFormat === 'csv'}
                  onChange={() => setExportFormat('csv')}
                />
                <span className="ml-2">CSV</span>
              </label>
            </div>
          </div>
          
          {/* Event Selection for Event Summary */}
          {reportType === 'event-summary' && (
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="selectedEvent">
                Select Event
              </label>
              <select
                id="selectedEvent"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                value={selectedEvent}
                onChange={(e) => setSelectedEvent(e.target.value)}
              >
                <option value="">-- Select an Event --</option>
                {events.map(event => (
                  <option key={event.id} value={event.id}>
                    {event.name} ({new Date(event.date).toLocaleDateString()})
                  </option>
                ))}
              </select>
            </div>
          )}
          
          {/* Filter by Event for other report types */}
          {reportType !== 'event-summary' && (
            <div className="mb-4">
              <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="filterEvent">
                Filter by Event (Optional)
              </label>
              <select
                id="filterEvent"
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                value={selectedEvent}
                onChange={(e) => setSelectedEvent(e.target.value)}
              >
                <option value="">All Events</option>
                {events.map(event => (
                  <option key={event.id} value={event.id}>
                    {event.name} ({new Date(event.date).toLocaleDateString()})
                  </option>
                ))}
              </select>
            </div>
          )}
          
          {/* Date Range Filter */}
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              Date Range
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-gray-700 text-xs mb-1" htmlFor="startDate">
                  Start Date
                </label>
                <input
                  id="startDate"
                  type="date"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  value={dateRange.start}
                  onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}
                />
              </div>
              <div>
                <label className="block text-gray-700 text-xs mb-1" htmlFor="endDate">
                  End Date
                </label>
                <input
                  id="endDate"
                  type="date"
                  className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  value={dateRange.end}
                  onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}
                />
              </div>
            </div>
          </div>
          
          {/* Include Options */}
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              Include Options
            </label>
            <div className="flex flex-wrap items-center space-x-4">
              <label className="inline-flex items-center">
                <input
                  type="checkbox"
                  className="form-checkbox"
                  checked={includeNotes}
                  onChange={() => setIncludeNotes(!includeNotes)}
                />
                <span className="ml-2">Notes</span>
              </label>
              
              {reportType === 'gift-summary' && (
                <label className="inline-flex items-center">
                  <input
                    type="checkbox"
                    className="form-checkbox"
                    checked={includePrice}
                    onChange={() => setIncludePrice(!includePrice)}
                  />
                  <span className="ml-2">Price</span>
                </label>
              )}
            </div>
          </div>
          
          {/* Sorting Options */}
          <div className="mb-6">
            <label className="block text-gray-700 text-sm font-bold mb-2">
              Sort By
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <select
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
              >
                {reportType === 'guest-list' ? (
                  <>
                    <option value="name">Name</option>
                    <option value="rsvpStatus">RSVP Status</option>
                  </>
                ) : (
                  <>
                    <option value="date">Date</option>
                    <option value="name">Gift Name</option>
                    <option value="giver">Giver</option>
                    {reportType === 'gift-summary' && <option value="price">Price</option>}
                  </>
                )}
              </select>
              
              <select
                className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                value={sortDirection}
                onChange={(e) => setSortDirection(e.target.value as 'asc' | 'desc')}
              >
                <option value="asc">Ascending</option>
                <option value="desc">Descending</option>
              </select>
            </div>
          </div>
          
          {/* Generate Button */}
          <button
            className="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
            onClick={handleGenerateReport}
          >
            Generate {exportFormat.toUpperCase()}
          </button>
        </div>
        
        {/* Share Report Section */}
        <div className="border-t border-gray-200 pt-6">
          <h2 className="text-xl font-semibold mb-4">Share Report</h2>
          
          <div className="mb-4">
            <label className="block text-gray-700 text-sm font-bold mb-2" htmlFor="sharingEmail">
              Email Address
            </label>
            <input
              id="sharingEmail"
              type="email"
              placeholder="Enter email address"
              className="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
              value={sharingEmail}
              onChange={(e) => setSharingEmail(e.target.value)}
            />
          </div>
          
          <div className="flex flex-wrap space-x-0 space-y-2 sm:space-x-2 sm:space-y-0">
            <button
              className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full sm:w-auto"
              onClick={handleShareReport}
              disabled={isSharing}
            >
              {isSharing ? 'Generating Link...' : 'Create Shareable Link'}
            </button>
            
            {sharingEmail && (
              <button
                className="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full sm:w-auto"
                onClick={handleShareReport}
                disabled={isSharing}
              >
                {isSharing ? 'Sending...' : 'Send via Email'}
              </button>
            )}
          </div>
          
          {/* Shareable Link Display */}
          {shareableLink && (
            <div className="mt-4">
              <label className="block text-gray-700 text-sm font-bold mb-2">
                Shareable Link:
              </label>
              <div className="flex">
                <input
                  type="text"
                  className="shadow appearance-none border rounded-l w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                  value={shareableLink}
                  readOnly
                />
                <button
                  className="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-r focus:outline-none focus:shadow-outline"
                  onClick={handleCopyLink}
                >
                  Copy
                </button>
              </div>
              <p className="text-sm text-gray-600 mt-1">
                This link allows anyone to view this report without logging in.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ReportsPage;
